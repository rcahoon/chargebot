/* parser generated by jison 0.4.10 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var subc = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"primary_expression":3,"IDENTIFIER":4,"INTEGER":5,"FLOATING":6,"BOOL_LITERAL":7,"STRING_LITERAL":8,"(":9,"constant_expression":10,")":11,"postfix_expression":12,"[":13,"]":14,"argument_expression_list":15,"INC_OP":16,"DEC_OP":17,",":18,"unary_expression":19,"unary_operator":20,"cast_expression":21,"+":22,"-":23,"!":24,"type_specifier":25,"multiplicative_expression":26,"*":27,"/":28,"%":29,"additive_expression":30,"relational_expression":31,"<":32,">":33,"LE_OP":34,"GE_OP":35,"equality_expression":36,"EQ_OP":37,"NE_OP":38,"logical_and_expression":39,"AND_OP":40,"logical_or_expression":41,"OR_OP":42,"conditional_expression":43,"?":44,":":45,"assignment_expression":46,"assignment_operator":47,"=":48,"MUL_ASSIGN":49,"DIV_ASSIGN":50,"MOD_ASSIGN":51,"ADD_ASSIGN":52,"SUB_ASSIGN":53,"AND_ASSIGN":54,"OR_ASSIGN":55,"expression":56,"declaration":57,"declarator":58,";":59,"initializer":60,"VOID":61,"INT":62,"FLOAT":63,"BOOL":64,"STRING":65,"{":66,"initializer_list":67,"}":68,"statement":69,"compound_statement":70,"expression_statement":71,"selection_statement":72,"iteration_statement":73,"jump_statement":74,"block_item_list":75,"block_item":76,"for_condition":77,"IF":78,"ELSE":79,"WHILE":80,"DO":81,"FOR":82,"CONTINUE":83,"BREAK":84,"RETURN":85,"translation_unit":86,"external_declaration":87,"function_definition":88,"function_parameters":89,"parameter_list":90,"parameter_declaration":91,"start":92,"EOF":93,"$accept":0,"$end":1},
terminals_: {2:"error",4:"IDENTIFIER",5:"INTEGER",6:"FLOATING",7:"BOOL_LITERAL",8:"STRING_LITERAL",9:"(",11:")",13:"[",14:"]",16:"INC_OP",17:"DEC_OP",18:",",22:"+",23:"-",24:"!",27:"*",28:"/",29:"%",32:"<",33:">",34:"LE_OP",35:"GE_OP",37:"EQ_OP",38:"NE_OP",40:"AND_OP",42:"OR_OP",44:"?",45:":",48:"=",49:"MUL_ASSIGN",50:"DIV_ASSIGN",51:"MOD_ASSIGN",52:"ADD_ASSIGN",53:"SUB_ASSIGN",54:"AND_ASSIGN",55:"OR_ASSIGN",59:";",61:"VOID",62:"INT",63:"FLOAT",64:"BOOL",65:"STRING",66:"{",68:"}",78:"IF",79:"ELSE",80:"WHILE",81:"DO",82:"FOR",83:"CONTINUE",84:"BREAK",85:"RETURN",93:"EOF"},
productions_: [0,[3,1],[3,1],[3,1],[3,1],[3,1],[3,3],[12,1],[12,4],[12,3],[12,4],[12,2],[12,2],[15,1],[15,3],[19,1],[19,2],[19,2],[19,2],[20,1],[20,1],[20,1],[21,1],[21,4],[26,1],[26,3],[26,3],[26,3],[30,1],[30,3],[30,3],[31,1],[31,3],[31,3],[31,3],[31,3],[36,1],[36,3],[36,3],[39,1],[39,3],[41,1],[41,3],[43,1],[43,5],[46,1],[46,3],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[56,1],[10,1],[57,2],[57,4],[25,1],[25,1],[25,1],[25,1],[25,1],[58,2],[58,4],[58,4],[58,5],[60,1],[60,3],[60,4],[67,1],[67,3],[69,1],[69,1],[69,1],[69,1],[69,1],[70,2],[70,3],[75,1],[75,2],[76,1],[76,1],[77,1],[77,2],[71,1],[71,2],[72,5],[72,7],[73,5],[73,7],[73,6],[73,7],[73,6],[73,7],[74,2],[74,2],[74,2],[74,3],[86,1],[86,2],[87,1],[87,1],[87,1],[88,3],[89,2],[89,3],[90,1],[90,3],[91,1],[92,2],[92,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
        this.$ = {
		  type: 'Identifier',
		  loc: makeLocation(this._$),
		  name: $$[$0],
		  lvalue: true
		};
      
break;
case 2:
	    this.$ = {
		  type: 'Literal',
		  loc: makeLocation(this._$),
		  value: parseInt($$[$0]),
		  datatype: 'INT'
		};
      
break;
case 3:
        this.$ = {
		  type: 'Literal',
		  loc: makeLocation(this._$),
		  value: parseFloat($$[$0]),
		  datatype: 'FLOAT'
		};
      
break;
case 4:
	    this.$ = {
		  type: 'Literal',
		  loc: makeLocation(this._$),
		  value: $$[$0] === 'true',
		  datatype: 'BOOL'
	    };
	  
break;
case 5:
        this.$ = {
		  type: 'Literal',
		  loc: makeLocation(this._$),
		  value: eval($$[$0]),
		  datatype: 'STRING'
		};
      
break;
case 6: this.$ = $$[$0-1]; 
break;
case 8:
        this.$ = {
		  type: 'MemberExpression',
		  loc: makeLocation(this._$),
		  object: $$[$0-3],
		  property: $$[$0-1],
		  computed: false,
		  lvalue: true
		};
      
break;
case 9:
        this.$ = {
		  type: 'CallExpression',
		  loc: makeLocation(this._$),
		  callee: {
		    type: 'Identifier',
			name: $$[$0-2]
		  },
		  arguments: []
		};
      
break;
case 10:
        this.$ = {
          type: 'CallExpression',
		  loc: makeLocation(this._$),
          callee: {
		    type: 'Identifier',
			name: $$[$0-3]
		  },
          arguments: $$[$0-1]
		};
      
break;
case 11:
	    if(typeof $$[$0-1].lvalue === "undefined") { throw { message: "++ doesn't work here, because I don't know what to assign to"}; }
        this.$ = {
		  type: 'UpdateExpression',
		  loc: makeLocation(this._$),
		  operator: '++',
		  argument: $$[$0-1],
		  prefix: false,
		};
      
break;
case 12:
	    if(typeof $$[$0-1].lvalue === "undefined") { throw { message: "-- doesn't work here, because I don't know what to assign to"}; }
        this.$ = {
		  type: 'UpdateExpression',
		  loc: makeLocation(this._$),
		  operator: '--',
		  argument: $$[$0-1],
		  prefix: false,
		};
      
break;
case 13: this.$ = [$$[$0]]; 
break;
case 14:
        $$[$0-2].push($$[$0]);
        this.$ = $$[$0-2];
      
break;
case 16:
	    if(typeof $$[$0].lvalue === "undefined") { throw { message: "++ doesn't work here, because i don't know what to assign to"}; }
        this.$ = {
		  type: 'UpdateExpression',
		  loc: makeLocation(this._$),
		  operator: '++',
		  argument: $$[$0],
		  prefix: true,
		};
      
break;
case 17:
	    if(typeof $$[$0].lvalue === "undefined") { throw { message: "-- doesn't work here, because i don't know what to assign to"}; }
        this.$ = {
		  type: 'UpdateExpression',
		  loc: makeLocation(this._$),
		  operator: '--',
		  argument: $$[$0],
		  prefix: true,
		};
      
break;
case 18:
        this.$ = {
		  type: 'UnaryExpression',
		  loc: makeLocation(this._$),
		  operator: $$[$0-1],
		  prefix: true,
          argument: $$[$0]
		};
      
break;
case 23:
	    //this.$ = $$[$0]
		this.$ = {
		  type: 'CastExpression',
		  loc: makeLocation(this._$),
		  datatype: $$[$0-2],
          argument: $$[$0]
		};
      
break;
case 25:
        this.$ = {
		  type: 'BinaryExpression',
		  loc: makeLocation(this._$),
		  operator: '*',
		  left: $$[$0-2],
		  right: $$[$0]
	    };
      
break;
case 26:
	    this.$ = {
		  type: 'BinaryExpression',
		  loc: makeLocation(this._$),
		  operator: '/',
		  left: $$[$0-2],
		  right: $$[$0]
	    };
      
break;
case 27:
        this.$ = {
		  type: 'BinaryExpression',loc: makeLocation(this._$),
		  operator: '%',
		  left: $$[$0-2],
		  right: $$[$0]
	    };
      
break;
case 29:
        this.$ = {
		  type: 'BinaryExpression',
		  loc: makeLocation(this._$),
		  operator: '+',
		  left: $$[$0-2],
		  right: $$[$0]
	    };
      
break;
case 30:
        this.$ = {
		  type: 'BinaryExpression',
		  loc: makeLocation(this._$),
		  operator: '-',
		  left: $$[$0-2],
		  right: $$[$0]
	    };
      
break;
case 32:
        this.$ = {
		  type: 'BinaryExpression',
		  loc: makeLocation(this._$),
		  operator: '<',
		  left: $$[$0-2],
		  right: $$[$0]
	    };
      
break;
case 33:
        this.$ = {
		  type: 'BinaryExpression',
		  loc: makeLocation(this._$),
		  operator: '>',
		  left: $$[$0-2],
		  right: $$[$0]
	    };
      
break;
case 34:
        this.$ = {
		  type: 'BinaryExpression',
		  loc: makeLocation(this._$),
		  operator: '<=',
		  left: $$[$0-2],
		  right: $$[$0]
	    };
      
break;
case 35:
        this.$ = {
		  type: 'BinaryExpression',
		  loc: makeLocation(this._$),
		  operator: '>=',
		  left: $$[$0-2],
		  right: $$[$0]
	    };
      
break;
case 37:
        this.$ = {
		  type: 'BinaryExpression',
		  loc: makeLocation(this._$),
		  operator: '===',
		  left: $$[$0-2],
		  right: $$[$0]
	    };
      
break;
case 38:
        this.$ = {
		  type: 'BinaryExpression',
		  loc: makeLocation(this._$),
		  operator: '!==',
		  left: $$[$0-2],
		  right: $$[$0]
	    };
      
break;
case 40:
		this.$ = {
		  type: 'LogicalExpression',
		  loc: makeLocation(this._$),
		  operator: '&&',
		  left: $$[$0-2],
		  right: $$[$0],
	    };
      
break;
case 42:
		this.$ = {
		  type: 'LogicalExpression',
		  loc: makeLocation(this._$),
		  operator: '||',
		  left: $$[$0-2],
		  right: $$[$0]
	    };
      
break;
case 44:
		this.$ = {
		  type: 'ConditionalExpression',
		  loc: makeLocation(this._$),
		  test: $$[$0-4],
		  consequent: $$[$0-2],
		  alternate: $$[$0]
	    };
      
break;
case 46:
	    if(typeof $$[$0-2].lvalue === "undefined") { throw { message: "I can't assign a value to this"}; }
        this.$ = {
		  type: 'AssignmentExpression',
		  loc: makeLocation(this._$),
		  operator: $$[$0-1],
		  left: $$[$0-2],
		  right: $$[$0]
	    };
      
break;
case 57:
        this.$ = {
		  type: 'VariableDeclaration',
		  declarations: [
		    {
		      type: 'VariableDeclarator',
			  loc: makeLocation(this._$),
			  id: $$[$0-1],
			  init: null,
			  datatype: $$[$0-1].datatype
			}
          ],
		  kind: 'var'
		};
      
break;
case 58:
	    this.$ = {
		  type: 'VariableDeclaration',
		  declarations: [
		    {
		      type: 'VariableDeclarator',
			  loc: makeLocation(this._$),
			  id: $$[$0-3],
			  init: $$[$0-1],
			  datatype: $$[$0-3].datatype
			}
          ],
		  kind: 'var'
		};
      
break;
case 59: this.$ = 'VOID'; 
break;
case 60: this.$ = 'INT'; 
break;
case 61: this.$ = 'FLOAT'; 
break;
case 62: this.$ = 'BOOL'; 
break;
case 63: this.$ = 'STRING'; 
break;
case 64:
        this.$ = {
		  type: 'Identifier',
		  loc: makeLocation(this._$),
		  name: $$[$0],
		  datatype: $$[$0-1]
		};
      
break;
case 65:
        this.$ = {
		  type: 'Identifier',
		  loc: makeLocation(this._$),
		  name: $$[$0-2],
		  datatype: '[]' + $$[$0-3]
	    };
      
break;
case 66:
        this.$ = {
		  type: 'Identifier',
		  loc: makeLocation(this._$),
		  name: $$[$0],
		  datatype: '[]' + $$[$0-3]
	    };
      
break;
case 67:
		this.$ = {
		  type: 'Identifier',
		  loc: makeLocation(this._$),
		  name: $$[$0-3],
		  datatype: '[]' + $$[$0-4],
		  datasize: $$[$0-1]
	    };
      
break;
case 69:
        this.$ = {
		  type: 'ArrayExpression',
		  loc: makeLocation(this._$),
		  elements: $$[$0-1]
		};
      
break;
case 70:
        this.$ = {
		  type: 'ArrayExpression',
		  loc: makeLocation(this._$),
		  elements: $$[$0-2]
		};
      
break;
case 71: this.$ = [$$[$0]]; 
break;
case 72:
        $$[$0-2].push($$[$0]);
        this.$ = $$[$0-2];
      
break;
case 78:
        this.$ = {
		  type: 'BlockStatement',
		  loc: makeLocation(this._$),
		  body: []
		};
      
break;
case 79:
	    this.$ = {
		  type: 'BlockStatement',
		  loc: makeLocation(this._$),
		  body: $$[$0-1]
		};
      
break;
case 80: this.$ = [$$[$0]]; 
break;
case 81:
        $$[$0-1].push($$[$0]);
        this.$ = $$[$0-1];
      
break;
case 84:
		this.$ = {
		  type: 'Literal',
		  loc: makeLocation(this._$),
		  value: true,
		  datatype: 'BOOL'
	    };
	  
break;
case 85:
	    this.$ = $$[$0-1];
      
break;
case 86:
	    this.$ = {
		  type: 'EmptyStatement',
		  loc: makeLocation(this._$),
		};
	  
break;
case 87:
	    this.$ = {
		  type: 'ExpressionStatement',
		  loc: makeLocation(this._$),
		  expression: $$[$0-1]
		};
	  
break;
case 88:
        this.$ = {
		  type: 'IfStatement',
		  loc: makeLocation(this._$),
		  test: $$[$0-2],
		  consequent: $$[$0],
		  alternate: null
		};
      
break;
case 89:
        this.$ = {
		  type: 'IfStatement',
		  loc: makeLocation(this._$),
		  test: $$[$0-4],
		  consequent: $$[$0-2],
		  alternate: $$[$0]
		};
      
break;
case 90:
        this.$ = {
		  type: 'WhileStatement',
		  loc: makeLocation(this._$),
		  test: $$[$0-2],
		  body: $$[$0]
		};
      
break;
case 91:
        this.$ = {
		  type: 'DoWhileStatement',
		  loc: makeLocation(this._$),
		  test: $$[$0-2],
          body: $$[$0-5]
		};
      
break;
case 92:
        this.$ = {
		  type: 'ForStatement',
		  loc: makeLocation(this._$),
		  init: $$[$0-3],
		  test: $$[$0-2],
		  update: null,
          body: $$[$0]
		};
      
break;
case 93:
		this.$ = {
		  type: 'ForStatement',
		  loc: makeLocation(this._$),
		  init: $$[$0-4],
		  test: $$[$0-3],
		  update: $$[$0-2],
          body: $$[$0]
		};
      
break;
case 94:
        this.$ = {
		  type: 'ForStatement',
		  loc: makeLocation(this._$),
		  init: $$[$0-3],
		  test: $$[$0-2],
		  update: null,
          body: $$[$0]
		};
      
break;
case 95:
        this.$ = {
		  type: 'ForStatement',
		  loc: makeLocation(this._$),
		  init: $$[$0-4],
		  test: $$[$0-3],
		  update: $$[$0-2],
          body: $$[$0]
		};
      
break;
case 96:
        this.$ = {
		  type: 'ContinueStatement',
		  loc: makeLocation(this._$),
		  label: null
		};
      
break;
case 97:
        this.$ = {
		  type: 'BreakStatement',
		  loc: makeLocation(this._$),
		  label: null
		};
      
break;
case 98:
        this.$ = {
		  type: 'ReturnStatement',
		  loc: makeLocation(this._$),
		  argument: null
		};
      
break;
case 99:
        this.$ = {
		  type: 'ReturnStatement',
		  loc: makeLocation(this._$),
		  argument: $$[$0-1]
		};
      
break;
case 100: this.$ = [$$[$0]]; 
break;
case 101:
        $$[$0-1].push($$[$0]);
        this.$ = $$[$0-1];
      
break;
case 105:
        this.$ = {
		  type: 'FunctionDeclaration',
		  loc: makeLocation(this._$),
		  id: $$[$0-2],
		  params: $$[$0-1],
		  defaults: [],
		  rest: null,
		  body: $$[$0],
		  generator: false,
		  expression: false,
		  datatype: $$[$0-2].datatype
		};
      
break;
case 106: this.$ = []; 
break;
case 107: this.$ = $$[$0-1]; 
break;
case 108: this.$ = [$$[$0]]; 
break;
case 109:
        $$[$0-2].push($$[$0]);
        this.$ = $$[$0-2];
      
break;
case 111:
	    /*return this.$ = {
		  type: 'FunctionExpression',
		  loc: makeLocation(this._$),
		  id: null,
		  params: [],
		  defaults: [],
		  rest: null,
		  body: {
		    type: 'BlockStatement',
		    body: $$[$0-1]
		  },
		  generator: false,
		  expression: false
		};*/
		return this.$ = {
		  type: 'Program',
		  loc: makeLocation(this._$),
		  body: $$[$0-1]
		};
	  
break;
case 112:
		return this.$ = {
		  type: 'Program',
		  loc: makeLocation(this._$),
		  body: []
		};
	  
break;
}
},
table: [{3:39,4:[1,40],5:[1,45],6:[1,46],7:[1,47],8:[1,48],9:[1,49],12:34,16:[1,35],17:[1,36],19:32,20:37,21:53,22:[1,41],23:[1,42],24:[1,43],25:24,26:52,30:51,31:50,36:44,39:38,41:33,43:31,46:25,56:16,57:7,58:13,59:[1,15],61:[1,26],62:[1,27],63:[1,28],64:[1,29],65:[1,30],66:[1,14],69:5,70:8,71:9,72:10,73:11,74:12,78:[1,17],80:[1,18],81:[1,19],82:[1,20],83:[1,21],84:[1,22],85:[1,23],86:2,87:4,88:6,92:1,93:[1,3]},{1:[3]},{3:39,4:[1,40],5:[1,45],6:[1,46],7:[1,47],8:[1,48],9:[1,49],12:34,16:[1,35],17:[1,36],19:32,20:37,21:53,22:[1,41],23:[1,42],24:[1,43],25:24,26:52,30:51,31:50,36:44,39:38,41:33,43:31,46:25,56:16,57:7,58:13,59:[1,15],61:[1,26],62:[1,27],63:[1,28],64:[1,29],65:[1,30],66:[1,14],69:5,70:8,71:9,72:10,73:11,74:12,78:[1,17],80:[1,18],81:[1,19],82:[1,20],83:[1,21],84:[1,22],85:[1,23],87:55,88:6,93:[1,54]},{1:[2,112]},{4:[2,100],5:[2,100],6:[2,100],7:[2,100],8:[2,100],9:[2,100],16:[2,100],17:[2,100],22:[2,100],23:[2,100],24:[2,100],59:[2,100],61:[2,100],62:[2,100],63:[2,100],64:[2,100],65:[2,100],66:[2,100],78:[2,100],80:[2,100],81:[2,100],82:[2,100],83:[2,100],84:[2,100],85:[2,100],93:[2,100]},{4:[2,102],5:[2,102],6:[2,102],7:[2,102],8:[2,102],9:[2,102],16:[2,102],17:[2,102],22:[2,102],23:[2,102],24:[2,102],59:[2,102],61:[2,102],62:[2,102],63:[2,102],64:[2,102],65:[2,102],66:[2,102],78:[2,102],80:[2,102],81:[2,102],82:[2,102],83:[2,102],84:[2,102],85:[2,102],93:[2,102]},{4:[2,103],5:[2,103],6:[2,103],7:[2,103],8:[2,103],9:[2,103],16:[2,103],17:[2,103],22:[2,103],23:[2,103],24:[2,103],59:[2,103],61:[2,103],62:[2,103],63:[2,103],64:[2,103],65:[2,103],66:[2,103],78:[2,103],80:[2,103],81:[2,103],82:[2,103],83:[2,103],84:[2,103],85:[2,103],93:[2,103]},{4:[2,104],5:[2,104],6:[2,104],7:[2,104],8:[2,104],9:[2,104],16:[2,104],17:[2,104],22:[2,104],23:[2,104],24:[2,104],59:[2,104],61:[2,104],62:[2,104],63:[2,104],64:[2,104],65:[2,104],66:[2,104],78:[2,104],80:[2,104],81:[2,104],82:[2,104],83:[2,104],84:[2,104],85:[2,104],93:[2,104]},{4:[2,73],5:[2,73],6:[2,73],7:[2,73],8:[2,73],9:[2,73],16:[2,73],17:[2,73],22:[2,73],23:[2,73],24:[2,73],59:[2,73],61:[2,73],62:[2,73],63:[2,73],64:[2,73],65:[2,73],66:[2,73],68:[2,73],78:[2,73],79:[2,73],80:[2,73],81:[2,73],82:[2,73],83:[2,73],84:[2,73],85:[2,73],93:[2,73]},{4:[2,74],5:[2,74],6:[2,74],7:[2,74],8:[2,74],9:[2,74],16:[2,74],17:[2,74],22:[2,74],23:[2,74],24:[2,74],59:[2,74],61:[2,74],62:[2,74],63:[2,74],64:[2,74],65:[2,74],66:[2,74],68:[2,74],78:[2,74],79:[2,74],80:[2,74],81:[2,74],82:[2,74],83:[2,74],84:[2,74],85:[2,74],93:[2,74]},{4:[2,75],5:[2,75],6:[2,75],7:[2,75],8:[2,75],9:[2,75],16:[2,75],17:[2,75],22:[2,75],23:[2,75],24:[2,75],59:[2,75],61:[2,75],62:[2,75],63:[2,75],64:[2,75],65:[2,75],66:[2,75],68:[2,75],78:[2,75],79:[2,75],80:[2,75],81:[2,75],82:[2,75],83:[2,75],84:[2,75],85:[2,75],93:[2,75]},{4:[2,76],5:[2,76],6:[2,76],7:[2,76],8:[2,76],9:[2,76],16:[2,76],17:[2,76],22:[2,76],23:[2,76],24:[2,76],59:[2,76],61:[2,76],62:[2,76],63:[2,76],64:[2,76],65:[2,76],66:[2,76],68:[2,76],78:[2,76],79:[2,76],80:[2,76],81:[2,76],82:[2,76],83:[2,76],84:[2,76],85:[2,76],93:[2,76]},{4:[2,77],5:[2,77],6:[2,77],7:[2,77],8:[2,77],9:[2,77],16:[2,77],17:[2,77],22:[2,77],23:[2,77],24:[2,77],59:[2,77],61:[2,77],62:[2,77],63:[2,77],64:[2,77],65:[2,77],66:[2,77],68:[2,77],78:[2,77],79:[2,77],80:[2,77],81:[2,77],82:[2,77],83:[2,77],84:[2,77],85:[2,77],93:[2,77]},{9:[1,59],48:[1,58],59:[1,57],89:56},{3:39,4:[1,40],5:[1,45],6:[1,46],7:[1,47],8:[1,48],9:[1,49],12:34,16:[1,35],17:[1,36],19:32,20:37,21:53,22:[1,41],23:[1,42],24:[1,43],25:24,26:52,30:51,31:50,36:44,39:38,41:33,43:31,46:25,56:16,57:63,58:65,59:[1,15],61:[1,26],62:[1,27],63:[1,28],64:[1,29],65:[1,30],66:[1,14],68:[1,60],69:64,70:8,71:9,72:10,73:11,74:12,75:61,76:62,78:[1,17],80:[1,18],81:[1,19],82:[1,20],83:[1,21],84:[1,22],85:[1,23]},{4:[2,86],5:[2,86],6:[2,86],7:[2,86],8:[2,86],9:[2,86],16:[2,86],17:[2,86],22:[2,86],23:[2,86],24:[2,86],59:[2,86],61:[2,86],62:[2,86],63:[2,86],64:[2,86],65:[2,86],66:[2,86],68:[2,86],78:[2,86],79:[2,86],80:[2,86],81:[2,86],82:[2,86],83:[2,86],84:[2,86],85:[2,86],93:[2,86]},{59:[1,66]},{9:[1,67]},{9:[1,68]},{3:39,4:[1,40],5:[1,45],6:[1,46],7:[1,47],8:[1,48],9:[1,49],12:34,16:[1,35],17:[1,36],19:32,20:37,21:53,22:[1,41],23:[1,42],24:[1,43],26:52,30:51,31:50,36:44,39:38,41:33,43:31,46:25,56:16,59:[1,15],66:[1,14],69:69,70:8,71:9,72:10,73:11,74:12,78:[1,17],80:[1,18],81:[1,19],82:[1,20],83:[1,21],84:[1,22],85:[1,23]},{9:[1,70]},{59:[1,71]},{59:[1,72]},{3:39,4:[1,40],5:[1,45],6:[1,46],7:[1,47],8:[1,48],9:[1,49],10:74,12:34,16:[1,35],17:[1,36],19:76,20:37,21:53,22:[1,41],23:[1,42],24:[1,43],26:52,30:51,31:50,36:44,39:38,41:33,43:75,59:[1,73]},{4:[1,77],13:[1,78]},{11:[2,55],59:[2,55]},{4:[2,59],11:[2,59],13:[2,59]},{4:[2,60],11:[2,60],13:[2,60]},{4:[2,61],11:[2,61],13:[2,61]},{4:[2,62],11:[2,62],13:[2,62]},{4:[2,63],11:[2,63],13:[2,63]},{11:[2,45],59:[2,45]},{11:[2,22],22:[2,22],23:[2,22],27:[2,22],28:[2,22],29:[2,22],32:[2,22],33:[2,22],34:[2,22],35:[2,22],37:[2,22],38:[2,22],40:[2,22],42:[2,22],44:[2,22],47:79,48:[1,80],49:[1,81],50:[1,82],51:[1,83],52:[1,84],53:[1,85],54:[1,86],55:[1,87],59:[2,22]},{11:[2,43],14:[2,43],18:[2,43],42:[1,89],44:[1,88],45:[2,43],59:[2,43],68:[2,43]},{11:[2,15],13:[1,90],14:[2,15],16:[1,91],17:[1,92],18:[2,15],22:[2,15],23:[2,15],27:[2,15],28:[2,15],29:[2,15],32:[2,15],33:[2,15],34:[2,15],35:[2,15],37:[2,15],38:[2,15],40:[2,15],42:[2,15],44:[2,15],45:[2,15],48:[2,15],49:[2,15],50:[2,15],51:[2,15],52:[2,15],53:[2,15],54:[2,15],55:[2,15],59:[2,15],68:[2,15]},{3:39,4:[1,40],5:[1,45],6:[1,46],7:[1,47],8:[1,48],9:[1,94],12:34,16:[1,35],17:[1,36],19:93,20:37,22:[1,41],23:[1,42],24:[1,43]},{3:39,4:[1,40],5:[1,45],6:[1,46],7:[1,47],8:[1,48],9:[1,94],12:34,16:[1,35],17:[1,36],19:95,20:37,22:[1,41],23:[1,42],24:[1,43]},{3:39,4:[1,40],5:[1,45],6:[1,46],7:[1,47],8:[1,48],9:[1,49],12:34,16:[1,35],17:[1,36],19:76,20:37,21:96,22:[1,41],23:[1,42],24:[1,43]},{11:[2,41],14:[2,41],18:[2,41],40:[1,97],42:[2,41],44:[2,41],45:[2,41],59:[2,41],68:[2,41]},{11:[2,7],13:[2,7],14:[2,7],16:[2,7],17:[2,7],18:[2,7],22:[2,7],23:[2,7],27:[2,7],28:[2,7],29:[2,7],32:[2,7],33:[2,7],34:[2,7],35:[2,7],37:[2,7],38:[2,7],40:[2,7],42:[2,7],44:[2,7],45:[2,7],48:[2,7],49:[2,7],50:[2,7],51:[2,7],52:[2,7],53:[2,7],54:[2,7],55:[2,7],59:[2,7],68:[2,7]},{9:[1,98],11:[2,1],13:[2,1],14:[2,1],16:[2,1],17:[2,1],18:[2,1],22:[2,1],23:[2,1],27:[2,1],28:[2,1],29:[2,1],32:[2,1],33:[2,1],34:[2,1],35:[2,1],37:[2,1],38:[2,1],40:[2,1],42:[2,1],44:[2,1],45:[2,1],48:[2,1],49:[2,1],50:[2,1],51:[2,1],52:[2,1],53:[2,1],54:[2,1],55:[2,1],59:[2,1],68:[2,1]},{4:[2,19],5:[2,19],6:[2,19],7:[2,19],8:[2,19],9:[2,19],16:[2,19],17:[2,19],22:[2,19],23:[2,19],24:[2,19]},{4:[2,20],5:[2,20],6:[2,20],7:[2,20],8:[2,20],9:[2,20],16:[2,20],17:[2,20],22:[2,20],23:[2,20],24:[2,20]},{4:[2,21],5:[2,21],6:[2,21],7:[2,21],8:[2,21],9:[2,21],16:[2,21],17:[2,21],22:[2,21],23:[2,21],24:[2,21]},{11:[2,39],14:[2,39],18:[2,39],37:[1,99],38:[1,100],40:[2,39],42:[2,39],44:[2,39],45:[2,39],59:[2,39],68:[2,39]},{11:[2,2],13:[2,2],14:[2,2],16:[2,2],17:[2,2],18:[2,2],22:[2,2],23:[2,2],27:[2,2],28:[2,2],29:[2,2],32:[2,2],33:[2,2],34:[2,2],35:[2,2],37:[2,2],38:[2,2],40:[2,2],42:[2,2],44:[2,2],45:[2,2],48:[2,2],49:[2,2],50:[2,2],51:[2,2],52:[2,2],53:[2,2],54:[2,2],55:[2,2],59:[2,2],68:[2,2]},{11:[2,3],13:[2,3],14:[2,3],16:[2,3],17:[2,3],18:[2,3],22:[2,3],23:[2,3],27:[2,3],28:[2,3],29:[2,3],32:[2,3],33:[2,3],34:[2,3],35:[2,3],37:[2,3],38:[2,3],40:[2,3],42:[2,3],44:[2,3],45:[2,3],48:[2,3],49:[2,3],50:[2,3],51:[2,3],52:[2,3],53:[2,3],54:[2,3],55:[2,3],59:[2,3],68:[2,3]},{11:[2,4],13:[2,4],14:[2,4],16:[2,4],17:[2,4],18:[2,4],22:[2,4],23:[2,4],27:[2,4],28:[2,4],29:[2,4],32:[2,4],33:[2,4],34:[2,4],35:[2,4],37:[2,4],38:[2,4],40:[2,4],42:[2,4],44:[2,4],45:[2,4],48:[2,4],49:[2,4],50:[2,4],51:[2,4],52:[2,4],53:[2,4],54:[2,4],55:[2,4],59:[2,4],68:[2,4]},{11:[2,5],13:[2,5],14:[2,5],16:[2,5],17:[2,5],18:[2,5],22:[2,5],23:[2,5],27:[2,5],28:[2,5],29:[2,5],32:[2,5],33:[2,5],34:[2,5],35:[2,5],37:[2,5],38:[2,5],40:[2,5],42:[2,5],44:[2,5],45:[2,5],48:[2,5],49:[2,5],50:[2,5],51:[2,5],52:[2,5],53:[2,5],54:[2,5],55:[2,5],59:[2,5],68:[2,5]},{3:39,4:[1,40],5:[1,45],6:[1,46],7:[1,47],8:[1,48],9:[1,49],10:101,12:34,16:[1,35],17:[1,36],19:76,20:37,21:53,22:[1,41],23:[1,42],24:[1,43],25:102,26:52,30:51,31:50,36:44,39:38,41:33,43:75,61:[1,26],62:[1,27],63:[1,28],64:[1,29],65:[1,30]},{11:[2,36],14:[2,36],18:[2,36],32:[1,103],33:[1,104],34:[1,105],35:[1,106],37:[2,36],38:[2,36],40:[2,36],42:[2,36],44:[2,36],45:[2,36],59:[2,36],68:[2,36]},{11:[2,31],14:[2,31],18:[2,31],22:[1,107],23:[1,108],32:[2,31],33:[2,31],34:[2,31],35:[2,31],37:[2,31],38:[2,31],40:[2,31],42:[2,31],44:[2,31],45:[2,31],59:[2,31],68:[2,31]},{11:[2,28],14:[2,28],18:[2,28],22:[2,28],23:[2,28],27:[1,109],28:[1,110],29:[1,111],32:[2,28],33:[2,28],34:[2,28],35:[2,28],37:[2,28],38:[2,28],40:[2,28],42:[2,28],44:[2,28],45:[2,28],59:[2,28],68:[2,28]},{11:[2,24],14:[2,24],18:[2,24],22:[2,24],23:[2,24],27:[2,24],28:[2,24],29:[2,24],32:[2,24],33:[2,24],34:[2,24],35:[2,24],37:[2,24],38:[2,24],40:[2,24],42:[2,24],44:[2,24],45:[2,24],59:[2,24],68:[2,24]},{1:[2,111]},{4:[2,101],5:[2,101],6:[2,101],7:[2,101],8:[2,101],9:[2,101],16:[2,101],17:[2,101],22:[2,101],23:[2,101],24:[2,101],59:[2,101],61:[2,101],62:[2,101],63:[2,101],64:[2,101],65:[2,101],66:[2,101],78:[2,101],80:[2,101],81:[2,101],82:[2,101],83:[2,101],84:[2,101],85:[2,101],93:[2,101]},{66:[1,14],70:112},{4:[2,57],5:[2,57],6:[2,57],7:[2,57],8:[2,57],9:[2,57],16:[2,57],17:[2,57],22:[2,57],23:[2,57],24:[2,57],59:[2,57],61:[2,57],62:[2,57],63:[2,57],64:[2,57],65:[2,57],66:[2,57],68:[2,57],78:[2,57],80:[2,57],81:[2,57],82:[2,57],83:[2,57],84:[2,57],85:[2,57],93:[2,57]},{3:39,4:[1,40],5:[1,45],6:[1,46],7:[1,47],8:[1,48],9:[1,49],10:114,12:34,16:[1,35],17:[1,36],19:76,20:37,21:53,22:[1,41],23:[1,42],24:[1,43],26:52,30:51,31:50,36:44,39:38,41:33,43:75,60:113,66:[1,115]},{11:[1,116],25:24,58:119,61:[1,26],62:[1,27],63:[1,28],64:[1,29],65:[1,30],90:117,91:118},{4:[2,78],5:[2,78],6:[2,78],7:[2,78],8:[2,78],9:[2,78],16:[2,78],17:[2,78],22:[2,78],23:[2,78],24:[2,78],59:[2,78],61:[2,78],62:[2,78],63:[2,78],64:[2,78],65:[2,78],66:[2,78],68:[2,78],78:[2,78],79:[2,78],80:[2,78],81:[2,78],82:[2,78],83:[2,78],84:[2,78],85:[2,78],93:[2,78]},{3:39,4:[1,40],5:[1,45],6:[1,46],7:[1,47],8:[1,48],9:[1,49],12:34,16:[1,35],17:[1,36],19:32,20:37,21:53,22:[1,41],23:[1,42],24:[1,43],25:24,26:52,30:51,31:50,36:44,39:38,41:33,43:31,46:25,56:16,57:63,58:65,59:[1,15],61:[1,26],62:[1,27],63:[1,28],64:[1,29],65:[1,30],66:[1,14],68:[1,120],69:64,70:8,71:9,72:10,73:11,74:12,76:121,78:[1,17],80:[1,18],81:[1,19],82:[1,20],83:[1,21],84:[1,22],85:[1,23]},{4:[2,80],5:[2,80],6:[2,80],7:[2,80],8:[2,80],9:[2,80],16:[2,80],17:[2,80],22:[2,80],23:[2,80],24:[2,80],59:[2,80],61:[2,80],62:[2,80],63:[2,80],64:[2,80],65:[2,80],66:[2,80],68:[2,80],78:[2,80],80:[2,80],81:[2,80],82:[2,80],83:[2,80],84:[2,80],85:[2,80]},{4:[2,82],5:[2,82],6:[2,82],7:[2,82],8:[2,82],9:[2,82],16:[2,82],17:[2,82],22:[2,82],23:[2,82],24:[2,82],59:[2,82],61:[2,82],62:[2,82],63:[2,82],64:[2,82],65:[2,82],66:[2,82],68:[2,82],78:[2,82],80:[2,82],81:[2,82],82:[2,82],83:[2,82],84:[2,82],85:[2,82]},{4:[2,83],5:[2,83],6:[2,83],7:[2,83],8:[2,83],9:[2,83],16:[2,83],17:[2,83],22:[2,83],23:[2,83],24:[2,83],59:[2,83],61:[2,83],62:[2,83],63:[2,83],64:[2,83],65:[2,83],66:[2,83],68:[2,83],78:[2,83],80:[2,83],81:[2,83],82:[2,83],83:[2,83],84:[2,83],85:[2,83]},{48:[1,58],59:[1,57]},{4:[2,87],5:[2,87],6:[2,87],7:[2,87],8:[2,87],9:[2,87],16:[2,87],17:[2,87],22:[2,87],23:[2,87],24:[2,87],59:[2,87],61:[2,87],62:[2,87],63:[2,87],64:[2,87],65:[2,87],66:[2,87],68:[2,87],78:[2,87],79:[2,87],80:[2,87],81:[2,87],82:[2,87],83:[2,87],84:[2,87],85:[2,87],93:[2,87]},{3:39,4:[1,40],5:[1,45],6:[1,46],7:[1,47],8:[1,48],9:[1,49],10:122,12:34,16:[1,35],17:[1,36],19:76,20:37,21:53,22:[1,41],23:[1,42],24:[1,43],26:52,30:51,31:50,36:44,39:38,41:33,43:75},{3:39,4:[1,40],5:[1,45],6:[1,46],7:[1,47],8:[1,48],9:[1,49],10:123,12:34,16:[1,35],17:[1,36],19:76,20:37,21:53,22:[1,41],23:[1,42],24:[1,43],26:52,30:51,31:50,36:44,39:38,41:33,43:75},{80:[1,124]},{3:39,4:[1,40],5:[1,45],6:[1,46],7:[1,47],8:[1,48],9:[1,49],12:34,16:[1,35],17:[1,36],19:32,20:37,21:53,22:[1,41],23:[1,42],24:[1,43],25:24,26:52,30:51,31:50,36:44,39:38,41:33,43:31,46:25,56:16,57:126,58:65,59:[1,15],61:[1,26],62:[1,27],63:[1,28],64:[1,29],65:[1,30],71:125},{4:[2,96],5:[2,96],6:[2,96],7:[2,96],8:[2,96],9:[2,96],16:[2,96],17:[2,96],22:[2,96],23:[2,96],24:[2,96],59:[2,96],61:[2,96],62:[2,96],63:[2,96],64:[2,96],65:[2,96],66:[2,96],68:[2,96],78:[2,96],79:[2,96],80:[2,96],81:[2,96],82:[2,96],83:[2,96],84:[2,96],85:[2,96],93:[2,96]},{4:[2,97],5:[2,97],6:[2,97],7:[2,97],8:[2,97],9:[2,97],16:[2,97],17:[2,97],22:[2,97],23:[2,97],24:[2,97],59:[2,97],61:[2,97],62:[2,97],63:[2,97],64:[2,97],65:[2,97],66:[2,97],68:[2,97],78:[2,97],79:[2,97],80:[2,97],81:[2,97],82:[2,97],83:[2,97],84:[2,97],85:[2,97],93:[2,97]},{4:[2,98],5:[2,98],6:[2,98],7:[2,98],8:[2,98],9:[2,98],16:[2,98],17:[2,98],22:[2,98],23:[2,98],24:[2,98],59:[2,98],61:[2,98],62:[2,98],63:[2,98],64:[2,98],65:[2,98],66:[2,98],68:[2,98],78:[2,98],79:[2,98],80:[2,98],81:[2,98],82:[2,98],83:[2,98],84:[2,98],85:[2,98],93:[2,98]},{59:[1,127]},{11:[2,56],14:[2,56],18:[2,56],45:[2,56],59:[2,56],68:[2,56]},{11:[2,22],14:[2,22],18:[2,22],22:[2,22],23:[2,22],27:[2,22],28:[2,22],29:[2,22],32:[2,22],33:[2,22],34:[2,22],35:[2,22],37:[2,22],38:[2,22],40:[2,22],42:[2,22],44:[2,22],45:[2,22],48:[2,22],49:[2,22],50:[2,22],51:[2,22],52:[2,22],53:[2,22],54:[2,22],55:[2,22],59:[2,22],68:[2,22]},{9:[2,64],11:[2,64],13:[1,128],18:[2,64],48:[2,64],59:[2,64]},{14:[1,129]},{3:39,4:[1,40],5:[1,45],6:[1,46],7:[1,47],8:[1,48],9:[1,49],12:34,16:[1,35],17:[1,36],19:32,20:37,21:53,22:[1,41],23:[1,42],24:[1,43],26:52,30:51,31:50,36:44,39:38,41:33,43:31,46:130},{4:[2,47],5:[2,47],6:[2,47],7:[2,47],8:[2,47],9:[2,47],16:[2,47],17:[2,47],22:[2,47],23:[2,47],24:[2,47]},{4:[2,48],5:[2,48],6:[2,48],7:[2,48],8:[2,48],9:[2,48],16:[2,48],17:[2,48],22:[2,48],23:[2,48],24:[2,48]},{4:[2,49],5:[2,49],6:[2,49],7:[2,49],8:[2,49],9:[2,49],16:[2,49],17:[2,49],22:[2,49],23:[2,49],24:[2,49]},{4:[2,50],5:[2,50],6:[2,50],7:[2,50],8:[2,50],9:[2,50],16:[2,50],17:[2,50],22:[2,50],23:[2,50],24:[2,50]},{4:[2,51],5:[2,51],6:[2,51],7:[2,51],8:[2,51],9:[2,51],16:[2,51],17:[2,51],22:[2,51],23:[2,51],24:[2,51]},{4:[2,52],5:[2,52],6:[2,52],7:[2,52],8:[2,52],9:[2,52],16:[2,52],17:[2,52],22:[2,52],23:[2,52],24:[2,52]},{4:[2,53],5:[2,53],6:[2,53],7:[2,53],8:[2,53],9:[2,53],16:[2,53],17:[2,53],22:[2,53],23:[2,53],24:[2,53]},{4:[2,54],5:[2,54],6:[2,54],7:[2,54],8:[2,54],9:[2,54],16:[2,54],17:[2,54],22:[2,54],23:[2,54],24:[2,54]},{3:39,4:[1,40],5:[1,45],6:[1,46],7:[1,47],8:[1,48],9:[1,49],10:131,12:34,16:[1,35],17:[1,36],19:76,20:37,21:53,22:[1,41],23:[1,42],24:[1,43],26:52,30:51,31:50,36:44,39:38,41:33,43:75},{3:39,4:[1,40],5:[1,45],6:[1,46],7:[1,47],8:[1,48],9:[1,49],12:34,16:[1,35],17:[1,36],19:76,20:37,21:53,22:[1,41],23:[1,42],24:[1,43],26:52,30:51,31:50,36:44,39:132},{3:39,4:[1,40],5:[1,45],6:[1,46],7:[1,47],8:[1,48],9:[1,49],10:133,12:34,16:[1,35],17:[1,36],19:76,20:37,21:53,22:[1,41],23:[1,42],24:[1,43],26:52,30:51,31:50,36:44,39:38,41:33,43:75},{11:[2,11],13:[2,11],14:[2,11],16:[2,11],17:[2,11],18:[2,11],22:[2,11],23:[2,11],27:[2,11],28:[2,11],29:[2,11],32:[2,11],33:[2,11],34:[2,11],35:[2,11],37:[2,11],38:[2,11],40:[2,11],42:[2,11],44:[2,11],45:[2,11],48:[2,11],49:[2,11],50:[2,11],51:[2,11],52:[2,11],53:[2,11],54:[2,11],55:[2,11],59:[2,11],68:[2,11]},{11:[2,12],13:[2,12],14:[2,12],16:[2,12],17:[2,12],18:[2,12],22:[2,12],23:[2,12],27:[2,12],28:[2,12],29:[2,12],32:[2,12],33:[2,12],34:[2,12],35:[2,12],37:[2,12],38:[2,12],40:[2,12],42:[2,12],44:[2,12],45:[2,12],48:[2,12],49:[2,12],50:[2,12],51:[2,12],52:[2,12],53:[2,12],54:[2,12],55:[2,12],59:[2,12],68:[2,12]},{11:[2,16],14:[2,16],18:[2,16],22:[2,16],23:[2,16],27:[2,16],28:[2,16],29:[2,16],32:[2,16],33:[2,16],34:[2,16],35:[2,16],37:[2,16],38:[2,16],40:[2,16],42:[2,16],44:[2,16],45:[2,16],48:[2,16],49:[2,16],50:[2,16],51:[2,16],52:[2,16],53:[2,16],54:[2,16],55:[2,16],59:[2,16],68:[2,16]},{3:39,4:[1,40],5:[1,45],6:[1,46],7:[1,47],8:[1,48],9:[1,49],10:101,12:34,16:[1,35],17:[1,36],19:76,20:37,21:53,22:[1,41],23:[1,42],24:[1,43],26:52,30:51,31:50,36:44,39:38,41:33,43:75},{11:[2,17],14:[2,17],18:[2,17],22:[2,17],23:[2,17],27:[2,17],28:[2,17],29:[2,17],32:[2,17],33:[2,17],34:[2,17],35:[2,17],37:[2,17],38:[2,17],40:[2,17],42:[2,17],44:[2,17],45:[2,17],48:[2,17],49:[2,17],50:[2,17],51:[2,17],52:[2,17],53:[2,17],54:[2,17],55:[2,17],59:[2,17],68:[2,17]},{11:[2,18],14:[2,18],18:[2,18],22:[2,18],23:[2,18],27:[2,18],28:[2,18],29:[2,18],32:[2,18],33:[2,18],34:[2,18],35:[2,18],37:[2,18],38:[2,18],40:[2,18],42:[2,18],44:[2,18],45:[2,18],48:[2,18],49:[2,18],50:[2,18],51:[2,18],52:[2,18],53:[2,18],54:[2,18],55:[2,18],59:[2,18],68:[2,18]},{3:39,4:[1,40],5:[1,45],6:[1,46],7:[1,47],8:[1,48],9:[1,49],12:34,16:[1,35],17:[1,36],19:76,20:37,21:53,22:[1,41],23:[1,42],24:[1,43],26:52,30:51,31:50,36:134},{3:39,4:[1,40],5:[1,45],6:[1,46],7:[1,47],8:[1,48],9:[1,49],10:137,11:[1,135],12:34,15:136,16:[1,35],17:[1,36],19:76,20:37,21:53,22:[1,41],23:[1,42],24:[1,43],26:52,30:51,31:50,36:44,39:38,41:33,43:75},{3:39,4:[1,40],5:[1,45],6:[1,46],7:[1,47],8:[1,48],9:[1,49],12:34,16:[1,35],17:[1,36],19:76,20:37,21:53,22:[1,41],23:[1,42],24:[1,43],26:52,30:51,31:138},{3:39,4:[1,40],5:[1,45],6:[1,46],7:[1,47],8:[1,48],9:[1,49],12:34,16:[1,35],17:[1,36],19:76,20:37,21:53,22:[1,41],23:[1,42],24:[1,43],26:52,30:51,31:139},{11:[1,140]},{11:[1,141]},{3:39,4:[1,40],5:[1,45],6:[1,46],7:[1,47],8:[1,48],9:[1,49],12:34,16:[1,35],17:[1,36],19:76,20:37,21:53,22:[1,41],23:[1,42],24:[1,43],26:52,30:142},{3:39,4:[1,40],5:[1,45],6:[1,46],7:[1,47],8:[1,48],9:[1,49],12:34,16:[1,35],17:[1,36],19:76,20:37,21:53,22:[1,41],23:[1,42],24:[1,43],26:52,30:143},{3:39,4:[1,40],5:[1,45],6:[1,46],7:[1,47],8:[1,48],9:[1,49],12:34,16:[1,35],17:[1,36],19:76,20:37,21:53,22:[1,41],23:[1,42],24:[1,43],26:52,30:144},{3:39,4:[1,40],5:[1,45],6:[1,46],7:[1,47],8:[1,48],9:[1,49],12:34,16:[1,35],17:[1,36],19:76,20:37,21:53,22:[1,41],23:[1,42],24:[1,43],26:52,30:145},{3:39,4:[1,40],5:[1,45],6:[1,46],7:[1,47],8:[1,48],9:[1,49],12:34,16:[1,35],17:[1,36],19:76,20:37,21:53,22:[1,41],23:[1,42],24:[1,43],26:146},{3:39,4:[1,40],5:[1,45],6:[1,46],7:[1,47],8:[1,48],9:[1,49],12:34,16:[1,35],17:[1,36],19:76,20:37,21:53,22:[1,41],23:[1,42],24:[1,43],26:147},{3:39,4:[1,40],5:[1,45],6:[1,46],7:[1,47],8:[1,48],9:[1,49],12:34,16:[1,35],17:[1,36],19:76,20:37,21:148,22:[1,41],23:[1,42],24:[1,43]},{3:39,4:[1,40],5:[1,45],6:[1,46],7:[1,47],8:[1,48],9:[1,49],12:34,16:[1,35],17:[1,36],19:76,20:37,21:149,22:[1,41],23:[1,42],24:[1,43]},{3:39,4:[1,40],5:[1,45],6:[1,46],7:[1,47],8:[1,48],9:[1,49],12:34,16:[1,35],17:[1,36],19:76,20:37,21:150,22:[1,41],23:[1,42],24:[1,43]},{4:[2,105],5:[2,105],6:[2,105],7:[2,105],8:[2,105],9:[2,105],16:[2,105],17:[2,105],22:[2,105],23:[2,105],24:[2,105],59:[2,105],61:[2,105],62:[2,105],63:[2,105],64:[2,105],65:[2,105],66:[2,105],78:[2,105],80:[2,105],81:[2,105],82:[2,105],83:[2,105],84:[2,105],85:[2,105],93:[2,105]},{59:[1,151]},{59:[2,68]},{3:39,4:[1,40],5:[1,45],6:[1,46],7:[1,47],8:[1,48],9:[1,49],10:153,12:34,16:[1,35],17:[1,36],19:76,20:37,21:53,22:[1,41],23:[1,42],24:[1,43],26:52,30:51,31:50,36:44,39:38,41:33,43:75,67:152},{66:[2,106]},{11:[1,154],18:[1,155]},{11:[2,108],18:[2,108]},{11:[2,110],18:[2,110]},{4:[2,79],5:[2,79],6:[2,79],7:[2,79],8:[2,79],9:[2,79],16:[2,79],17:[2,79],22:[2,79],23:[2,79],24:[2,79],59:[2,79],61:[2,79],62:[2,79],63:[2,79],64:[2,79],65:[2,79],66:[2,79],68:[2,79],78:[2,79],79:[2,79],80:[2,79],81:[2,79],82:[2,79],83:[2,79],84:[2,79],85:[2,79],93:[2,79]},{4:[2,81],5:[2,81],6:[2,81],7:[2,81],8:[2,81],9:[2,81],16:[2,81],17:[2,81],22:[2,81],23:[2,81],24:[2,81],59:[2,81],61:[2,81],62:[2,81],63:[2,81],64:[2,81],65:[2,81],66:[2,81],68:[2,81],78:[2,81],80:[2,81],81:[2,81],82:[2,81],83:[2,81],84:[2,81],85:[2,81]},{11:[1,156]},{11:[1,157]},{9:[1,158]},{3:39,4:[1,40],5:[1,45],6:[1,46],7:[1,47],8:[1,48],9:[1,49],10:161,12:34,16:[1,35],17:[1,36],19:76,20:37,21:53,22:[1,41],23:[1,42],24:[1,43],26:52,30:51,31:50,36:44,39:38,41:33,43:75,59:[1,160],77:159},{3:39,4:[1,40],5:[1,45],6:[1,46],7:[1,47],8:[1,48],9:[1,49],10:161,12:34,16:[1,35],17:[1,36],19:76,20:37,21:53,22:[1,41],23:[1,42],24:[1,43],26:52,30:51,31:50,36:44,39:38,41:33,43:75,59:[1,160],77:162},{4:[2,99],5:[2,99],6:[2,99],7:[2,99],8:[2,99],9:[2,99],16:[2,99],17:[2,99],22:[2,99],23:[2,99],24:[2,99],59:[2,99],61:[2,99],62:[2,99],63:[2,99],64:[2,99],65:[2,99],66:[2,99],68:[2,99],78:[2,99],79:[2,99],80:[2,99],81:[2,99],82:[2,99],83:[2,99],84:[2,99],85:[2,99],93:[2,99]},{3:39,4:[1,40],5:[1,45],6:[1,46],7:[1,47],8:[1,48],9:[1,49],10:164,12:34,14:[1,163],16:[1,35],17:[1,36],19:76,20:37,21:53,22:[1,41],23:[1,42],24:[1,43],26:52,30:51,31:50,36:44,39:38,41:33,43:75},{4:[1,165]},{11:[2,46],59:[2,46]},{45:[1,166]},{11:[2,42],14:[2,42],18:[2,42],40:[1,97],42:[2,42],44:[2,42],45:[2,42],59:[2,42],68:[2,42]},{14:[1,167]},{11:[2,40],14:[2,40],18:[2,40],37:[1,99],38:[1,100],40:[2,40],42:[2,40],44:[2,40],45:[2,40],59:[2,40],68:[2,40]},{11:[2,9],13:[2,9],14:[2,9],16:[2,9],17:[2,9],18:[2,9],22:[2,9],23:[2,9],27:[2,9],28:[2,9],29:[2,9],32:[2,9],33:[2,9],34:[2,9],35:[2,9],37:[2,9],38:[2,9],40:[2,9],42:[2,9],44:[2,9],45:[2,9],48:[2,9],49:[2,9],50:[2,9],51:[2,9],52:[2,9],53:[2,9],54:[2,9],55:[2,9],59:[2,9],68:[2,9]},{11:[1,168],18:[1,169]},{11:[2,13],18:[2,13]},{11:[2,37],14:[2,37],18:[2,37],32:[1,103],33:[1,104],34:[1,105],35:[1,106],37:[2,37],38:[2,37],40:[2,37],42:[2,37],44:[2,37],45:[2,37],59:[2,37],68:[2,37]},{11:[2,38],14:[2,38],18:[2,38],32:[1,103],33:[1,104],34:[1,105],35:[1,106],37:[2,38],38:[2,38],40:[2,38],42:[2,38],44:[2,38],45:[2,38],59:[2,38],68:[2,38]},{11:[2,6],13:[2,6],14:[2,6],16:[2,6],17:[2,6],18:[2,6],22:[2,6],23:[2,6],27:[2,6],28:[2,6],29:[2,6],32:[2,6],33:[2,6],34:[2,6],35:[2,6],37:[2,6],38:[2,6],40:[2,6],42:[2,6],44:[2,6],45:[2,6],48:[2,6],49:[2,6],50:[2,6],51:[2,6],52:[2,6],53:[2,6],54:[2,6],55:[2,6],59:[2,6],68:[2,6]},{3:39,4:[1,40],5:[1,45],6:[1,46],7:[1,47],8:[1,48],9:[1,49],12:34,16:[1,35],17:[1,36],19:76,20:37,21:170,22:[1,41],23:[1,42],24:[1,43]},{11:[2,32],14:[2,32],18:[2,32],22:[1,107],23:[1,108],32:[2,32],33:[2,32],34:[2,32],35:[2,32],37:[2,32],38:[2,32],40:[2,32],42:[2,32],44:[2,32],45:[2,32],59:[2,32],68:[2,32]},{11:[2,33],14:[2,33],18:[2,33],22:[1,107],23:[1,108],32:[2,33],33:[2,33],34:[2,33],35:[2,33],37:[2,33],38:[2,33],40:[2,33],42:[2,33],44:[2,33],45:[2,33],59:[2,33],68:[2,33]},{11:[2,34],14:[2,34],18:[2,34],22:[1,107],23:[1,108],32:[2,34],33:[2,34],34:[2,34],35:[2,34],37:[2,34],38:[2,34],40:[2,34],42:[2,34],44:[2,34],45:[2,34],59:[2,34],68:[2,34]},{11:[2,35],14:[2,35],18:[2,35],22:[1,107],23:[1,108],32:[2,35],33:[2,35],34:[2,35],35:[2,35],37:[2,35],38:[2,35],40:[2,35],42:[2,35],44:[2,35],45:[2,35],59:[2,35],68:[2,35]},{11:[2,29],14:[2,29],18:[2,29],22:[2,29],23:[2,29],27:[1,109],28:[1,110],29:[1,111],32:[2,29],33:[2,29],34:[2,29],35:[2,29],37:[2,29],38:[2,29],40:[2,29],42:[2,29],44:[2,29],45:[2,29],59:[2,29],68:[2,29]},{11:[2,30],14:[2,30],18:[2,30],22:[2,30],23:[2,30],27:[1,109],28:[1,110],29:[1,111],32:[2,30],33:[2,30],34:[2,30],35:[2,30],37:[2,30],38:[2,30],40:[2,30],42:[2,30],44:[2,30],45:[2,30],59:[2,30],68:[2,30]},{11:[2,25],14:[2,25],18:[2,25],22:[2,25],23:[2,25],27:[2,25],28:[2,25],29:[2,25],32:[2,25],33:[2,25],34:[2,25],35:[2,25],37:[2,25],38:[2,25],40:[2,25],42:[2,25],44:[2,25],45:[2,25],59:[2,25],68:[2,25]},{11:[2,26],14:[2,26],18:[2,26],22:[2,26],23:[2,26],27:[2,26],28:[2,26],29:[2,26],32:[2,26],33:[2,26],34:[2,26],35:[2,26],37:[2,26],38:[2,26],40:[2,26],42:[2,26],44:[2,26],45:[2,26],59:[2,26],68:[2,26]},{11:[2,27],14:[2,27],18:[2,27],22:[2,27],23:[2,27],27:[2,27],28:[2,27],29:[2,27],32:[2,27],33:[2,27],34:[2,27],35:[2,27],37:[2,27],38:[2,27],40:[2,27],42:[2,27],44:[2,27],45:[2,27],59:[2,27],68:[2,27]},{4:[2,58],5:[2,58],6:[2,58],7:[2,58],8:[2,58],9:[2,58],16:[2,58],17:[2,58],22:[2,58],23:[2,58],24:[2,58],59:[2,58],61:[2,58],62:[2,58],63:[2,58],64:[2,58],65:[2,58],66:[2,58],68:[2,58],78:[2,58],80:[2,58],81:[2,58],82:[2,58],83:[2,58],84:[2,58],85:[2,58],93:[2,58]},{18:[1,172],68:[1,171]},{18:[2,71],68:[2,71]},{66:[2,107]},{25:24,58:119,61:[1,26],62:[1,27],63:[1,28],64:[1,29],65:[1,30],91:173},{3:39,4:[1,40],5:[1,45],6:[1,46],7:[1,47],8:[1,48],9:[1,49],12:34,16:[1,35],17:[1,36],19:32,20:37,21:53,22:[1,41],23:[1,42],24:[1,43],26:52,30:51,31:50,36:44,39:38,41:33,43:31,46:25,56:16,59:[1,15],66:[1,14],69:174,70:8,71:9,72:10,73:11,74:12,78:[1,17],80:[1,18],81:[1,19],82:[1,20],83:[1,21],84:[1,22],85:[1,23]},{3:39,4:[1,40],5:[1,45],6:[1,46],7:[1,47],8:[1,48],9:[1,49],12:34,16:[1,35],17:[1,36],19:32,20:37,21:53,22:[1,41],23:[1,42],24:[1,43],26:52,30:51,31:50,36:44,39:38,41:33,43:31,46:25,56:16,59:[1,15],66:[1,14],69:175,70:8,71:9,72:10,73:11,74:12,78:[1,17],80:[1,18],81:[1,19],82:[1,20],83:[1,21],84:[1,22],85:[1,23]},{3:39,4:[1,40],5:[1,45],6:[1,46],7:[1,47],8:[1,48],9:[1,49],10:176,12:34,16:[1,35],17:[1,36],19:76,20:37,21:53,22:[1,41],23:[1,42],24:[1,43],26:52,30:51,31:50,36:44,39:38,41:33,43:75},{3:39,4:[1,40],5:[1,45],6:[1,46],7:[1,47],8:[1,48],9:[1,49],11:[1,177],12:34,16:[1,35],17:[1,36],19:32,20:37,21:53,22:[1,41],23:[1,42],24:[1,43],26:52,30:51,31:50,36:44,39:38,41:33,43:31,46:25,56:178},{4:[2,84],5:[2,84],6:[2,84],7:[2,84],8:[2,84],9:[2,84],11:[2,84],16:[2,84],17:[2,84],22:[2,84],23:[2,84],24:[2,84]},{59:[1,179]},{3:39,4:[1,40],5:[1,45],6:[1,46],7:[1,47],8:[1,48],9:[1,49],11:[1,180],12:34,16:[1,35],17:[1,36],19:32,20:37,21:53,22:[1,41],23:[1,42],24:[1,43],26:52,30:51,31:50,36:44,39:38,41:33,43:31,46:25,56:181},{9:[2,65],11:[2,65],18:[2,65],48:[2,65],59:[2,65]},{14:[1,182]},{9:[2,66],11:[2,66],18:[2,66],48:[2,66],59:[2,66]},{3:39,4:[1,40],5:[1,45],6:[1,46],7:[1,47],8:[1,48],9:[1,49],12:34,16:[1,35],17:[1,36],19:76,20:37,21:53,22:[1,41],23:[1,42],24:[1,43],26:52,30:51,31:50,36:44,39:38,41:33,43:183},{11:[2,8],13:[2,8],14:[2,8],16:[2,8],17:[2,8],18:[2,8],22:[2,8],23:[2,8],27:[2,8],28:[2,8],29:[2,8],32:[2,8],33:[2,8],34:[2,8],35:[2,8],37:[2,8],38:[2,8],40:[2,8],42:[2,8],44:[2,8],45:[2,8],48:[2,8],49:[2,8],50:[2,8],51:[2,8],52:[2,8],53:[2,8],54:[2,8],55:[2,8],59:[2,8],68:[2,8]},{11:[2,10],13:[2,10],14:[2,10],16:[2,10],17:[2,10],18:[2,10],22:[2,10],23:[2,10],27:[2,10],28:[2,10],29:[2,10],32:[2,10],33:[2,10],34:[2,10],35:[2,10],37:[2,10],38:[2,10],40:[2,10],42:[2,10],44:[2,10],45:[2,10],48:[2,10],49:[2,10],50:[2,10],51:[2,10],52:[2,10],53:[2,10],54:[2,10],55:[2,10],59:[2,10],68:[2,10]},{3:39,4:[1,40],5:[1,45],6:[1,46],7:[1,47],8:[1,48],9:[1,49],10:184,12:34,16:[1,35],17:[1,36],19:76,20:37,21:53,22:[1,41],23:[1,42],24:[1,43],26:52,30:51,31:50,36:44,39:38,41:33,43:75},{11:[2,23],14:[2,23],18:[2,23],22:[2,23],23:[2,23],27:[2,23],28:[2,23],29:[2,23],32:[2,23],33:[2,23],34:[2,23],35:[2,23],37:[2,23],38:[2,23],40:[2,23],42:[2,23],44:[2,23],45:[2,23],48:[2,23],49:[2,23],50:[2,23],51:[2,23],52:[2,23],53:[2,23],54:[2,23],55:[2,23],59:[2,23],68:[2,23]},{59:[2,69]},{3:39,4:[1,40],5:[1,45],6:[1,46],7:[1,47],8:[1,48],9:[1,49],10:186,12:34,16:[1,35],17:[1,36],19:76,20:37,21:53,22:[1,41],23:[1,42],24:[1,43],26:52,30:51,31:50,36:44,39:38,41:33,43:75,68:[1,185]},{11:[2,109],18:[2,109]},{4:[2,88],5:[2,88],6:[2,88],7:[2,88],8:[2,88],9:[2,88],16:[2,88],17:[2,88],22:[2,88],23:[2,88],24:[2,88],59:[2,88],61:[2,88],62:[2,88],63:[2,88],64:[2,88],65:[2,88],66:[2,88],68:[2,88],78:[2,88],79:[1,187],80:[2,88],81:[2,88],82:[2,88],83:[2,88],84:[2,88],85:[2,88],93:[2,88]},{4:[2,90],5:[2,90],6:[2,90],7:[2,90],8:[2,90],9:[2,90],16:[2,90],17:[2,90],22:[2,90],23:[2,90],24:[2,90],59:[2,90],61:[2,90],62:[2,90],63:[2,90],64:[2,90],65:[2,90],66:[2,90],68:[2,90],78:[2,90],79:[2,90],80:[2,90],81:[2,90],82:[2,90],83:[2,90],84:[2,90],85:[2,90],93:[2,90]},{11:[1,188]},{3:39,4:[1,40],5:[1,45],6:[1,46],7:[1,47],8:[1,48],9:[1,49],12:34,16:[1,35],17:[1,36],19:32,20:37,21:53,22:[1,41],23:[1,42],24:[1,43],26:52,30:51,31:50,36:44,39:38,41:33,43:31,46:25,56:16,59:[1,15],66:[1,14],69:189,70:8,71:9,72:10,73:11,74:12,78:[1,17],80:[1,18],81:[1,19],82:[1,20],83:[1,21],84:[1,22],85:[1,23]},{11:[1,190]},{4:[2,85],5:[2,85],6:[2,85],7:[2,85],8:[2,85],9:[2,85],11:[2,85],16:[2,85],17:[2,85],22:[2,85],23:[2,85],24:[2,85]},{3:39,4:[1,40],5:[1,45],6:[1,46],7:[1,47],8:[1,48],9:[1,49],12:34,16:[1,35],17:[1,36],19:32,20:37,21:53,22:[1,41],23:[1,42],24:[1,43],26:52,30:51,31:50,36:44,39:38,41:33,43:31,46:25,56:16,59:[1,15],66:[1,14],69:191,70:8,71:9,72:10,73:11,74:12,78:[1,17],80:[1,18],81:[1,19],82:[1,20],83:[1,21],84:[1,22],85:[1,23]},{11:[1,192]},{9:[2,67],11:[2,67],18:[2,67],48:[2,67],59:[2,67]},{11:[2,44],14:[2,44],18:[2,44],45:[2,44],59:[2,44],68:[2,44]},{11:[2,14],18:[2,14]},{59:[2,70]},{18:[2,72],68:[2,72]},{3:39,4:[1,40],5:[1,45],6:[1,46],7:[1,47],8:[1,48],9:[1,49],12:34,16:[1,35],17:[1,36],19:32,20:37,21:53,22:[1,41],23:[1,42],24:[1,43],26:52,30:51,31:50,36:44,39:38,41:33,43:31,46:25,56:16,59:[1,15],66:[1,14],69:193,70:8,71:9,72:10,73:11,74:12,78:[1,17],80:[1,18],81:[1,19],82:[1,20],83:[1,21],84:[1,22],85:[1,23]},{59:[1,194]},{4:[2,92],5:[2,92],6:[2,92],7:[2,92],8:[2,92],9:[2,92],16:[2,92],17:[2,92],22:[2,92],23:[2,92],24:[2,92],59:[2,92],61:[2,92],62:[2,92],63:[2,92],64:[2,92],65:[2,92],66:[2,92],68:[2,92],78:[2,92],79:[2,92],80:[2,92],81:[2,92],82:[2,92],83:[2,92],84:[2,92],85:[2,92],93:[2,92]},{3:39,4:[1,40],5:[1,45],6:[1,46],7:[1,47],8:[1,48],9:[1,49],12:34,16:[1,35],17:[1,36],19:32,20:37,21:53,22:[1,41],23:[1,42],24:[1,43],26:52,30:51,31:50,36:44,39:38,41:33,43:31,46:25,56:16,59:[1,15],66:[1,14],69:195,70:8,71:9,72:10,73:11,74:12,78:[1,17],80:[1,18],81:[1,19],82:[1,20],83:[1,21],84:[1,22],85:[1,23]},{4:[2,94],5:[2,94],6:[2,94],7:[2,94],8:[2,94],9:[2,94],16:[2,94],17:[2,94],22:[2,94],23:[2,94],24:[2,94],59:[2,94],61:[2,94],62:[2,94],63:[2,94],64:[2,94],65:[2,94],66:[2,94],68:[2,94],78:[2,94],79:[2,94],80:[2,94],81:[2,94],82:[2,94],83:[2,94],84:[2,94],85:[2,94],93:[2,94]},{3:39,4:[1,40],5:[1,45],6:[1,46],7:[1,47],8:[1,48],9:[1,49],12:34,16:[1,35],17:[1,36],19:32,20:37,21:53,22:[1,41],23:[1,42],24:[1,43],26:52,30:51,31:50,36:44,39:38,41:33,43:31,46:25,56:16,59:[1,15],66:[1,14],69:196,70:8,71:9,72:10,73:11,74:12,78:[1,17],80:[1,18],81:[1,19],82:[1,20],83:[1,21],84:[1,22],85:[1,23]},{4:[2,89],5:[2,89],6:[2,89],7:[2,89],8:[2,89],9:[2,89],16:[2,89],17:[2,89],22:[2,89],23:[2,89],24:[2,89],59:[2,89],61:[2,89],62:[2,89],63:[2,89],64:[2,89],65:[2,89],66:[2,89],68:[2,89],78:[2,89],79:[2,89],80:[2,89],81:[2,89],82:[2,89],83:[2,89],84:[2,89],85:[2,89],93:[2,89]},{4:[2,91],5:[2,91],6:[2,91],7:[2,91],8:[2,91],9:[2,91],16:[2,91],17:[2,91],22:[2,91],23:[2,91],24:[2,91],59:[2,91],61:[2,91],62:[2,91],63:[2,91],64:[2,91],65:[2,91],66:[2,91],68:[2,91],78:[2,91],79:[2,91],80:[2,91],81:[2,91],82:[2,91],83:[2,91],84:[2,91],85:[2,91],93:[2,91]},{4:[2,93],5:[2,93],6:[2,93],7:[2,93],8:[2,93],9:[2,93],16:[2,93],17:[2,93],22:[2,93],23:[2,93],24:[2,93],59:[2,93],61:[2,93],62:[2,93],63:[2,93],64:[2,93],65:[2,93],66:[2,93],68:[2,93],78:[2,93],79:[2,93],80:[2,93],81:[2,93],82:[2,93],83:[2,93],84:[2,93],85:[2,93],93:[2,93]},{4:[2,95],5:[2,95],6:[2,95],7:[2,95],8:[2,95],9:[2,95],16:[2,95],17:[2,95],22:[2,95],23:[2,95],24:[2,95],59:[2,95],61:[2,95],62:[2,95],63:[2,95],64:[2,95],65:[2,95],66:[2,95],68:[2,95],78:[2,95],79:[2,95],80:[2,95],81:[2,95],82:[2,95],83:[2,95],84:[2,95],85:[2,95],93:[2,95]}],
defaultActions: {3:[2,112],54:[2,111],114:[2,68],116:[2,106],154:[2,107],171:[2,69],185:[2,70]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip comments */
break;
case 1:/* ignore multiline comment */
break;
case 2:return 84
break;
case 3:return 83
break;
case 4:return 81
break;
case 5:return 63
break;
case 6:return 79
break;
case 7:return 63
break;
case 8:return 82
break;
case 9:return 78
break;
case 10:return 62
break;
case 11:return 85
break;
case 12:return 61
break;
case 13:return 80
break;
case 14:return 64
break;
case 15:return 64
break;
case 16:return 65
break;
case 17:return 65
break;
case 18:return 7
break;
case 19:return 7
break;
case 20:return 52
break;
case 21:return 53
break;
case 22:return 49
break;
case 23:return 50
break;
case 24:return 51
break;
case 25:return 54
break;
case 26:return 55
break;
case 27:return 16
break;
case 28:return 17
break;
case 29:return 40
break;
case 30:return 42
break;
case 31:return 34
break;
case 32:return 35
break;
case 33:return 37
break;
case 34:return 38
break;
case 35:return 59
break;
case 36:return 66
break;
case 37:return 68
break;
case 38:return 18
break;
case 39:return 45
break;
case 40:return 48
break;
case 41:return 9
break;
case 42:return 11
break;
case 43:return 13
break;
case 44:return 14
break;
case 45:return 24
break;
case 46:return 23
break;
case 47:return 22
break;
case 48:return 27
break;
case 49:return 28
break;
case 50:return 29
break;
case 51:return 32
break;
case 52:return 33
break;
case 53:return "?"
break;
case 54:/* skip whitespace */
break;
case 55:return 4
break;
case 56:return 5
break;
case 57:return 6
break;
case 58:return 6
break;
case 59:return 6
break;
case 60:return 5
break;
case 61:return 8
break;
case 62:return 93
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:\/\*(.|\n|\r)*?\*\/)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:do\b)/,/^(?:double\b)/,/^(?:else\b)/,/^(?:float\b)/,/^(?:for\b)/,/^(?:if\b)/,/^(?:int\b)/,/^(?:return\b)/,/^(?:void\b)/,/^(?:while\b)/,/^(?:bool\b)/,/^(?:boolean\b)/,/^(?:string\b)/,/^(?:String\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:%=)/,/^(?:&=)/,/^(?:\|=)/,/^(?:\+\+)/,/^(?:--)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:;)/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?::)/,/^(?:=)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:!)/,/^(?:-)/,/^(?:\+)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:<)/,/^(?:>)/,/^(?:\?)/,/^(?:\s+)/,/^(?:[a-zA-Z_][a-zA-Z_0-9]*)/,/^(?:0[xX][a-fA-F0-9]+[uUlL]?)/,/^(?:[0-9]+[eE][-+]?[0-9]+[fFlL]?)/,/^(?:[0-9]*\.[0-9]+([eE][-+]?[0-9]+)?[fFlL]?)/,/^(?:[0-9]+\.[0-9]*([eE][-+]?[0-9]+)?[fFlL]?)/,/^(?:[0-9]+)/,/^(?:"(\\.|[^\\"])*")/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = subc;
exports.Parser = subc.Parser;
exports.parse = function () { return subc.parse.apply(subc, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}